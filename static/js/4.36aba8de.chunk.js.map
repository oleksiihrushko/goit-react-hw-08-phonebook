{"version":3,"sources":["components/App.module.css","components/contactForm/ContactForm.module.css","components/contactList/ContactList.module.css","components/contactItem/ContactItem.module.css","redux/contacts/contactsOperations.js","components/contactForm/ContactForm.js","components/contactForm/ContactFormContainer.js","components/filter/Filter.js","components/filter/FilterContainer.js","components/contactItem/ContactItem.js","components/contactItem/ContactItemContainer.js","components/contactList/ContactList.js","components/contactList/ContactListContainer.js","components/contacts/Contacts.js"],"names":["module","exports","axios","defaults","baseURL","name","number","dispatch","contactsActions","addContactRequest","post","then","data","addContactSuccess","catch","error","addContactError","fetchContactRequest","fetchContactSuccess","fetchContactError","id","removeContactRequest","delete","removeContactSuccess","removeContactError","ContactForm","state","useDispatch","useState","setName","setNumber","className","styles","contactForm","onSubmit","e","preventDefault","items","contacts","find","contact","alert","contactsOperations","TextField","style","borderRadius","type","value","onChange","target","marginBottom","Button","variant","color","padding","connect","Filter","onChangeFilter","mapDispatchToProps","changeFilter","contactsSelectors","getFilter","ContactItem","onRemoveContact","listItem","listItemP","listItemButton","onClick","ownProps","itemMove","enter","enterActive","exit","exitActive","ContactList","TransitionGroup","component","map","CSSTransition","key","timeout","classNames","getFillteredContacts","Contacts","this","props","onFetchContacts","paddingLeft","length","sectionTitle","Component","getContacts","dicpatch"],"mappings":"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","file":"static/js/4.36aba8de.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"sectionTitle\":\"App_sectionTitle__3-2s9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactForm\":\"ContactForm_contactForm__xav0S\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"ContactList_enter__1koJF\",\"enterActive\":\"ContactList_enterActive__O9RVP\",\"exit\":\"ContactList_exit__1DI7-\",\"exitActive\":\"ContactList_exitActive__3cMN4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"listItem\":\"ContactItem_listItem__2JCis\",\"listItemP\":\"ContactItem_listItemP__C78pP\",\"listItemButton\":\"ContactItem_listItemButton__1HDpC\"};","import axios from 'axios';\r\nimport contactsActions from './contactsActions';\r\n\r\naxios.defaults.baseURL = 'https://goit-phonebook-api.herokuapp.com/';\r\n\r\nconst fetchContacts = () => dispatch => {\r\n  dispatch(contactsActions.fetchContactRequest());\r\n\r\n  axios('/contacts')\r\n    .then(({ data }) => dispatch(contactsActions.fetchContactSuccess(data)))\r\n    .catch(error => dispatch(contactsActions.fetchContactError(error)));\r\n};\r\n\r\nconst addContact = (name, number) => dispatch => {\r\n  dispatch(contactsActions.addContactRequest());\r\n  axios\r\n    .post('/contacts', {\r\n      name,\r\n      number,\r\n    })\r\n    .then(({ data }) => dispatch(contactsActions.addContactSuccess(data)))\r\n    .catch(error => dispatch(contactsActions.addContactError(error)));\r\n};\r\n\r\nconst removeContact = id => dispatch => {\r\n  dispatch(contactsActions.removeContactRequest());\r\n\r\n  axios\r\n    .delete(`/contacts/${id}`)\r\n    .then(() => dispatch(contactsActions.removeContactSuccess(id)))\r\n    .catch(error => dispatch(contactsActions.removeContactError(error)));\r\n};\r\n\r\nexport default { addContact, fetchContacts, removeContact };\r\n","import React, { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport contactsOperations from '../../redux/contacts/contactsOperations';\r\n\r\nimport styles from './ContactForm.module.css';\r\nimport { Button, TextField } from '@material-ui/core';\r\n\r\nconst ContactForm = ({ state }) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const [name, setName] = useState('');\r\n  const changeNameHandler = ({ target }) => setName(target.value);\r\n\r\n  const [number, setNumber] = useState('');\r\n  const changeNumberHandler = ({ target }) => setNumber(target.value);\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    const { items } = state.contacts;\r\n\r\n    if (items && items.find(contact => name === contact.name)) {\r\n      alert('User with this name is already exist');\r\n    } else {\r\n      dispatch(contactsOperations.addContact(name, number));\r\n    }\r\n\r\n    setName('');\r\n    setNumber('');\r\n  };\r\n\r\n  return (\r\n    <form className={styles.contactForm} onSubmit={handleSubmit}>\r\n      <label>\r\n        Name\r\n        <br />\r\n        <TextField\r\n          style={{ borderRadius: 4 }}\r\n          name=\"name\"\r\n          type=\"text\"\r\n          value={name}\r\n          onChange={changeNameHandler}\r\n        />\r\n      </label>\r\n      <br />\r\n      <label>\r\n        Number\r\n        <br />\r\n        <TextField\r\n          style={{ borderRadius: 4, marginBottom: 5 }}\r\n          name=\"number\"\r\n          type=\"text\"\r\n          value={number}\r\n          onChange={changeNumberHandler}\r\n        />\r\n      </label>\r\n      <br />\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        style={{ borderRadius: 4, padding: 4 }}\r\n        type=\"submit\"\r\n      >\r\n        Add contact\r\n      </Button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default ContactForm;\r\n","import { connect } from 'react-redux';\r\nimport ContactForm from './ContactForm';\r\n\r\nconst mapStateToProps = state => ({\r\n  state,\r\n});\r\n\r\nexport default connect(mapStateToProps)(ContactForm);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { TextField } from '@material-ui/core';\r\n\r\nconst Filter = ({ value, onChangeFilter }) => (\r\n  <form>\r\n    <label>\r\n      Find contacts by name\r\n      <br />\r\n      <TextField\r\n        variant=\"outlined\"\r\n        style={{ borderRadius: 4 }}\r\n        type=\"text\"\r\n        value={value}\r\n        onChange={e => onChangeFilter(e.target.value)}\r\n      />\r\n    </label>\r\n  </form>\r\n);\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string.isRequired,\r\n  onChangeFilter: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Filter;\r\n","import { connect } from 'react-redux';\r\nimport contactsActions from '../../redux/contacts/contactsActions';\r\nimport contactsSelectors from '../../redux/contacts/contactsSelectors';\r\nimport Filter from './Filter';\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    value: contactsSelectors.getFilter(state),\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  onChangeFilter: contactsActions.changeFilter,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import React from 'react';\r\nimport styles from './ContactItem.module.css';\r\nimport PropTypes from 'prop-types';\r\nimport { Button } from '@material-ui/core';\r\n\r\nconst ContactItem = ({ contact: { name, number }, onRemoveContact }) => {\r\n  return (\r\n    <li className={styles.listItem}>\r\n      <p className={styles.listItemP}>\r\n        {name}: {number}\r\n      </p>\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        className={styles.listItemButton}\r\n        onClick={onRemoveContact}\r\n        type=\"button\"\r\n      >\r\n        Delete\r\n      </Button>\r\n    </li>\r\n  );\r\n};\r\n\r\nContactItem.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    }),\r\n  ),\r\n  onRemoveContact: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactItem;\r\n","import { connect } from 'react-redux';\r\nimport contactsOperations from '../../redux/contacts/contactsOperations';\r\nimport ContactItem from './ContactItem';\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => ({\r\n  onRemoveContact: () =>\r\n    dispatch(contactsOperations.removeContact(ownProps.contact.id)),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(ContactItem);\r\n","import React from 'react';\r\nimport { TransitionGroup, CSSTransition } from 'react-transition-group';\r\nimport styles from './ContactList.module.css';\r\nimport PropTypes from 'prop-types';\r\nimport ContactItem from '../contactItem/ContactItemContainer';\r\n\r\nconst itemMove = {\r\n  enter: styles.enter,\r\n  enterActive: styles.enterActive,\r\n  exit: styles.exit,\r\n  exitActive: styles.exitActive,\r\n};\r\n\r\nconst ContactList = ({ contacts }) => {\r\n  return (\r\n    <TransitionGroup component=\"ul\">\r\n      {contacts &&\r\n        contacts.map(contact => (\r\n          <CSSTransition key={contact.id} timeout={250} classNames={itemMove}>\r\n            <ContactItem contact={contact} />\r\n          </CSSTransition>\r\n        ))}\r\n    </TransitionGroup>\r\n  );\r\n};\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    }),\r\n  ),\r\n};\r\n\r\nexport default ContactList;\r\n","import { connect } from 'react-redux';\r\nimport contactsSelectors from '../../redux/contacts/contactsSelectors';\r\nimport ContactList from './ContactList';\r\n\r\nconst mapStateToProps = state => {\r\n  if (state.contacts) {\r\n    return {\r\n      contacts: contactsSelectors.getFillteredContacts(state),\r\n    };\r\n  }\r\n};\r\n\r\nexport default connect(mapStateToProps)(ContactList);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport contactsSelectors from '../../redux/contacts/contactsSelectors';\r\nimport contactsOperations from '../../redux/contacts/contactsOperations';\r\nimport styles from '../App.module.css';\r\nimport ContactForm from '../contactForm/ContactFormContainer';\r\nimport Filter from '../filter/FilterContainer';\r\nimport ContactList from '../contactList/ContactListContainer';\r\n\r\nclass Contacts extends Component {\r\n  componentDidMount() {\r\n    this.props.onFetchContacts();\r\n  }\r\n\r\n  render() {\r\n    const { contacts } = this.props;\r\n    return (\r\n      <div style={{ paddingLeft: '20px' }}>\r\n        <ContactForm />\r\n        {contacts && contacts.length > 1 && <Filter />}\r\n        <h2 className={styles.sectionTitle}>Contacts</h2>\r\n        <ContactList />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    contacts: contactsSelectors.getContacts(state),\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dicpatch => ({\r\n  onFetchContacts: () => dicpatch(contactsOperations.fetchContacts()),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Contacts);\r\n"],"sourceRoot":""}